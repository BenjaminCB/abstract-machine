module Main where

import Control.Monad.State.Lazy
import Data.Bifunctor (first)
import Data.Map qualified as M
import System.Directory (doesDirectoryExist, listDirectory)
import System.Environment (getArgs)
import System.FilePath ((</>))
import Text.Parsec (ParseError)

import AbstractMachine qualified as AM
import Parser

-- autogenerated
getAllFilePaths :: FilePath -> IO [FilePath]
getAllFilePaths dir = do
    entries <- listDirectory dir
    paths <-
        mapM
            ( \entry -> do
                let fullPath = dir </> entry
                isDir <- doesDirectoryExist fullPath
                if isDir
                    then getAllFilePaths fullPath
                    else return [fullPath]
            )
            entries
    return (concat paths)

partition :: [(a, Either b c)] -> ([(a, b)], [(a, c)])
partition = foldr f ([], [])
    where
        f (a, e) (ls, rs) = either (\l -> ((a, l) : ls, rs)) (\r -> (ls, (a, r) : rs)) e

newlines :: Int -> IO ()
newlines = putStr . concat . flip replicate "\n"

printParseError :: (FilePath, ParseError) -> IO ()
printParseError (path, err) = do
    putStrLn path
    print err
    newlines 1

main :: IO ()
main = do
    [rootDir, entryPoint] <- getArgs
    paths <- getAllFilePaths rootDir
    fileContents <- mapM readFile paths
    let tuples = zip paths fileContents
    let parseResults = map (fmap parseInput) tuples
    let (errs, srcFiles) = partition parseResults
    newlines 3
    putStrLn "Parse Errors:"
    mapM_ printParseError errs
    newlines 3
    let fileGetter = M.fromList (map (first $ drop (length rootDir)) srcFiles)
    case M.lookup entryPoint fileGetter of
        Just src -> do
            let amResult = runStateT (AM.run [AM.SrcFile src] [] [entryPoint]) (fileGetter, M.empty, M.empty)
            case amResult of
                Left err -> do
                    putStrLn "Abstract Machine Error:"
                    putStrLn err
                Right (_, (_, locals, _)) -> do
                    putStrLn "locals:"
                    print locals
        Nothing -> do
            putStrLn "Entry point not found"
