module Main where

import System.Directory (doesDirectoryExist, listDirectory)
import System.Environment (getArgs)
import System.FilePath ((</>))
import Data.Either (partitionEithers, either, isRight)
import Data.List (partition)

import AST qualified
import AbstractMachine qualified as AM
import Parser

-- autogenerated
getAllFilePaths :: FilePath -> IO [FilePath]
getAllFilePaths dir = do
    entries <- listDirectory dir
    paths <-
        mapM
            ( \entry -> do
                let fullPath = dir </> entry
                isDir <- doesDirectoryExist fullPath
                if isDir
                    then getAllFilePaths fullPath
                    else return [fullPath]
            )
            entries
    return (concat paths)

main :: IO ()
main = do
    [rootDir, entryPoint] <- getArgs
    paths <- getAllFilePaths rootDir
    fileContents <- mapM readFile paths
    let tuples = zip paths fileContents
    let parseResults = map (fmap parseInput) tuples
    let (errs, srcFiles) = partition (isRight . snd) parseResults
    mapM_ print errs
    mapM_ print srcFiles
