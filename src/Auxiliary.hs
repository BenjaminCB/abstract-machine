module Auxiliary where

import System.Directory (doesDirectoryExist, listDirectory)
import System.FilePath ((</>))

-- autogenerated
getAllFilePaths :: FilePath -> IO [FilePath]
getAllFilePaths dir = do
    entries <- listDirectory dir
    paths <-
        mapM
            ( \entry -> do
                let fullPath = dir </> entry
                isDir <- doesDirectoryExist fullPath
                if isDir
                    then getAllFilePaths fullPath
                    else return [fullPath]
            )
            entries
    return (concat paths)

partition :: [(a, Either b c)] -> ([(a, b)], [(a, c)])
partition = foldr f ([], [])
    where
        f (a, e) (ls, rs) = either (\l -> ((a, l) : ls, rs)) (\r -> (ls, (a, r) : rs)) e

appendAtEveryN :: Int -> a -> [[a]] -> [[a]]
appendAtEveryN n x = go n
    where
        go _ [] = []
        go 0 (xs : xxs) = (xs ++ [x]) : go n xxs
        go m (xs : xxs) = xs : go (m - 1) xxs
